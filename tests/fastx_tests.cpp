#include "doctest.h"
#include "fastx.h"

TEST_CASE("Testing Fastq::nextRecord") {

	Gz::Reader reader("test_data/test.sub.1.fq.gz");
	std::optional<Fastq::Rec> rec = Fastq::nextRecord(reader);
	CHECK(rec->seq_id == "V350082487L3C001R0020000004/1");
	CHECK(rec->seq == "GAACTCTTAGACGGTGCAAGCGCAGAATTTGACATGGATCTTGTATCAAAGGGAGAACTTTCACCTGTATTTTTCGGTTCTGCACTGACAAATTTTGGTGTGGAAACATTTTTAAAGCATTTTTTACAGATGACATATTCTCCATTGCCA");
	CHECK(rec->qual == "6187EBB=F5<?61?A@E</9>BE>E:6ED:8BFF1==DD@D@CEE?FF@=074EBDEFFCCFE7FE8EFEFDB:<DEFE3DDEEFD5EFFFEAFCF5FF7F;/FA&FEA?F=CDCAEFFD@D3FFEFFFF??EFFGFFBFFBFF4DC:D");


	std::vector<std::optional<Fastq::Rec>> recs;

	while (rec) {
		recs.push_back(rec);
		rec = Fastq::nextRecord(reader);
	}

	CHECK(recs.size() == 2500);
	auto last_rec = recs[recs.size()-1];
	CHECK(last_rec->seq_id == "V350082487L3C001R0020157281/1");
	CHECK(last_rec->seq == "GGACATCAGATGATATCCCTCGCCTACGGCGCCAAGACATATAAGCTCAAGTTTGGTCACCGCGGCGGAAACCACCCGGTCATGAACCTCGACACCAACAAGATAGAGATAACCTCGCAGAACCACAGCTATGCCGTTGACCCGAAAACG");
	CHECK(last_rec->qual == "@C,CBA;>E8ECB<<E9?A77>=?F4==@95FAE>,F9DFFF@8EEF?FDA0?E:5D@F)EC<E>A:@,=DEDFCEDADD?D8=DEC@FFD'EFDAFF@FEE;FFC7E:DE9FEBEDFEB>DFDD<99FF>DCDFD<AE=;9ECDEAD84");

	//// loops
	//Gz::Reader nonexistent_reader("test_data/nonexistent");
	//auto empty_rec = Fastq::nextRecord(nonexistent_reader);
	//CHECK(!empty_rec);
}

TEST_CASE("Testing Fastq::nextRecordPair") {

	Gz::Reader reader1("test_data/test.sub.1.fq.gz");
	Gz::Reader reader2("test_data/test.sub.2.fq.gz");
	
	std::optional<Fastq::Pair> rec_pair = Fastq::nextRecordPair(reader1, reader2);
	CHECK(rec_pair->first.seq_id == "V350082487L3C001R0020000004/1");
	CHECK(rec_pair->first.seq == "GAACTCTTAGACGGTGCAAGCGCAGAATTTGACATGGATCTTGTATCAAAGGGAGAACTTTCACCTGTATTTTTCGGTTCTGCACTGACAAATTTTGGTGTGGAAACATTTTTAAAGCATTTTTTACAGATGACATATTCTCCATTGCCA");
	CHECK(rec_pair->first.qual == "6187EBB=F5<?61?A@E</9>BE>E:6ED:8BFF1==DD@D@CEE?FF@=074EBDEFFCCFE7FE8EFEFDB:<DEFE3DDEEFD5EFFFEAFCF5FF7F;/FA&FEA?F=CDCAEFFD@D3FFEFFFF??EFFGFFBFFBFF4DC:D");

	CHECK(rec_pair->second.seq_id == "V350082487L3C001R0020000004/2");
	CHECK(rec_pair->second.seq == "GGGTAACTTCCATGCCTGCAGTAAATTTACCGGAACAGATACGCATAAATGCGATCCTGTCCCTGTGGTTTTTATTCATATTTGCCTGAATTTTAAAAACAAATGCGGAAAAATCTTCATCAAACGGATTTTTTTCTCCCTCATTTGACC");
	CHECK(rec_pair->second.qual == ";D<=ECCDFCEEEEBEEF;E@DFFFEECFD8C=EE=EF>EF=C=FEFEDFEDE>E@DFEDBFEFF6FEEEFCCFEFB=DF9EFE<EFEBEEECAACDBFAF=>BD/=7CEFFFB9E5DDF6EAF;/C4@EF@FDFEF4BFE-A>EFD=@C");

	std::vector<std::optional<Fastq::Pair>> rec_pairs;

	while (rec_pair) {
		rec_pairs.push_back(rec_pair);
		rec_pair = Fastq::nextRecordPair(reader1, reader2);
	}

	CHECK(rec_pairs.size() == 2500);
	auto last_rec = rec_pairs[rec_pairs.size()-1];
	CHECK(last_rec->first.seq_id == "V350082487L3C001R0020157281/1");
	CHECK(last_rec->first.seq == "GGACATCAGATGATATCCCTCGCCTACGGCGCCAAGACATATAAGCTCAAGTTTGGTCACCGCGGCGGAAACCACCCGGTCATGAACCTCGACACCAACAAGATAGAGATAACCTCGCAGAACCACAGCTATGCCGTTGACCCGAAAACG");
	CHECK(last_rec->first.qual == "@C,CBA;>E8ECB<<E9?A77>=?F4==@95FAE>,F9DFFF@8EEF?FDA0?E:5D@F)EC<E>A:@,=DEDFCEDADD?D8=DEC@FFD'EFDAFF@FEE;FFC7E:DE9FEBEDFEB>DFDD<99FF>DCDFD<AE=;9ECDEAD84");

	CHECK(last_rec->second.seq_id == "V350082487L3C001R0020157281/2");
	CHECK(last_rec->second.seq == "ACGAGCACCTTTTTTATATCAGTTCTCTTAGGCACGCTCCTTCGCCTCCTTCATATAGTCGATAAACTGACCGAACAGATAGCTGCTGTCCTGCGGACCGGGCGCGCTCTCGGGGTGATACTGCACGCTGAACACAAGGACTTTCTTGCA");
	CHECK(last_rec->second.qual == "FFFAFAFBEFE6DDEFEFF7FE3F@D@AFD@AED>FBFDDFFBF?A0:FFFEFAFEAF90F?EBFFFFCE?EFDE8FFCFAD81ACFGBDBCF:;FE<BBA7BF4F1D3@=CBFF>FCECF/E=D-F2?F-F7F>=F99-FEF9@F=5E=");
}

